:PROPERTIES:
:ID:       2d3118ad-5642-4a40-9354-c68f6b28bd94
:mtime:    20220324222907
:ctime:    20220317084112
:END:
#+title: Refactoring
#+filetags: :stub:

- [[id:c58c0663-8600-49b9-9349-732cd7f4ce86][Code smell]]

New programmers learn from programmers that have been working with the code for a while, as well as from the code itself. Once you start refactoring a large code basis, it is useful to start with a single example of what clean code looks like for your architecture. This way other programmers can emulate that code.

For a large scale refactoring, it is useful to first ensure the code is [[id:1e71596e-e4af-4780-bcfa-8f5b49f36eb0][DRY]], even if this means the code is not as clean as it could be. This has two advantages:
- It is easier to defend against regressions in the cleanliness of the code, since it is more uniform.
- Once the code is [[id:1e71596e-e4af-4780-bcfa-8f5b49f36eb0][DRY]], a single refactoring will have a larger impact, because it has a larger surface area.
