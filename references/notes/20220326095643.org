:PROPERTIES:
:ID:       022d50af-f814-4578-8ff6-a1979a03b287
:mtime:    20220326102150
:ctime:    20220326095643
:END:
#+title: Abstraction should emerge naturally
#+filetags: :unclean:

- You can fall into the trap of abstracting in anticipations of complexity, not when you actually
  need to abstract
  - This is also why it is important to [[id:1ebe7887-d253-453d-b0f2-725acfcbcbd7][Just get started]]
- It is relatively easy to introduce abstractions, but difficult to remove them if they turn out
  wrong
  - Because not only do you need to understand all the lower-levels, now you also need to
    understand how the higher-levels connect together.

- [[id:c3216a7c-a272-47d7-b893-533e0075c03c][All abstractions are leaky]]

*From previous incarnation of this note*
The more components are added to a system, the more complex it becomes. [[id:b897355f-2a9e-471d-9450-c333ace038a9][Abstraction is a powerful
tool to fight increasing complexity]], however, care should be taken that simple things are not made
complex by an abstraction.

This can often happen when a programmer or designer introduces an abstraction in anticipation of a
complexity. Instead, you should [[id:46004645-fc20-4e76-bfd4-55596d405219][Refactor when necessary]], keeping principles such as [[id:1e092046-ad51-49b5-b16d-aa31052aa098][KISS]] and [[id:5e1f8794-0ce1-4737-8ead-c06594925f88][YAGNI]]
in mind.
