* TODO.org
** Code cleaning
+ I need to structure my Emacs configuration. A reasonable solution is by doing it in such a way that I can smartly debug any issues. Unfortunately, bughunter does not work for me, because I am on Nix, so I will have to do smart bisections by hand.
+ There are various places where my monorepo file location is hard-coded. Instead, I might want to always assume it is located at ~/monorepo and make a module my/monorepo.nix for it.
+ I have a nix flake check now, but it does not check if my packages build successfully. How can I incorporate that?
+ Host names should be completely specified by the directory containing the machine configuration.
+ Modularize my Terraform code.
+ I should keep the machine names short, i.e. to a single word: cloud-server -> cloud, virtual-devbox -> devbox.
+ Make the cloud-server storage impermanent using impermanence and remove the impermanence parameter altogether. All machines should run impermanence.

** Development
+ Getting into a development container can be slow, because I have to go to the image, set up the volume, start the container, use TRAMP to connect and run ~/bin/bash~ in a shell. This can easily be automated and it makes me wonder if someone already has. Embark also seems like a good choice here.
+ A Docker workflow also fits quite well with eshell. The commands are usually similar or the same, so I do not feel like I get the full benefit from docker.el.
+ How well would it work to create my own function that sets up a container from a Dockerfile and then opens dired in that container? It might require a bit of waiting for the container to spin up. Or did someone else already wrote something like this?
+ If I use a Docker container for development, I would like to separate my buffers. It can get confusing when I have multiple shells and multiple dired buffers with the same contents since I am using volumes.
+ I need a better shell experience. Eshell has tight TRAMP integration which is perfect for a Docker kind of workflow. I will need to set up some eshell configuration.
+ I should start moving over my data-science scratchpad to my reference projects.

** Desktop
+ What is the right way to handle reproducibility when it comes to Jupyter? I can run it as a service and add new kernels when I need to, but in principle I would need to spin up a Jupyter instance from the ground up. What about using tdda or dvc for reproducibility concerns of analyses?
+ It could be a good exercise to package IceCat for Nix. There is no binary for it and the [[https://git.savannah.gnu.org/cgit/gnuzilla.git/tree/data/README.IceCat][packaging instructions]] are clear. I do not mind building it from source.
+ I forgot to plug in my battery laptop in time and I ran out off power. It would be better to use the ~upower~ module to automatically power down my laptop in time.
+ I want to switch my window-manager to EXWM, however there seem to be some problems.
  - What is the right way to work with Emacs inside EXWM? Do you run Emacs inside Emacs? What if Emacs crashes, how do I restart my window-manager?
+ How well does Geeqie work as a way to find duplicate images?
+ For my use case, maybe Syncthing is not the best solution. I sometimes end up with sync-conflicts where I do not think there should be. This has me worried that Syncthing might accidentally delete files I do not want to have deleted. Maybe Unison is a better tool for me?
+ B00merang-Project's Windows themes to make it easier for any guests?
+ Use headphones to start and pause videos / music
+ Receive a notification when the battery is low (at 20% and at 10%). That should be easy with Dunst.
+ Set up a nice notification theme for increasing / decreasing brightness and volume
+ betterscreenlock automatically locks after 10 mins, even when a video is playing

** Emacs
+ By using Nix bundle, we can take an application and turn it into a self-contained "bundle". This could be an AppImage [[https://github.com/ralismark/nix-appimage][for example]]. I should try this out for my Emacs configuration.
+ Git grep can search through previous commits? How does that work? If so, should I bind it to a key combination or is it easier to use Magit?
+ What is the fastest way to grep through a large file? How can Emacs handle searching through large files?
+ Move my eshell aliases into a version-controlled file. Which aliases are nice to have?
+ Think about a useful eshell workflow. How do I add completion (pcompletion)? The main selling point of eshell is its integration with Emacs including TRAMP.
+ Sometimes I want to pull up a shell for a directory, but the shell I pull up is not in the directory belonging to the buffer. Is there a smart way to work with this? I also do not want to end up with too many shell buffers.
+ Switch to denote. A good way to start is by first setting up the inbox. This will allow me to get a feeling over a couple of days for how denote works.
+ I have been using the denote naming schema for a bit now. Is there a way to extract all the keywords used in a given directory? That would be especially useful for quickly seeing what is in a directory. It will allow me to have a flatter directory structure and rely more on keyword search functionality.
+ Use Emacs for a while and then start documenting in a README what kind of functionality I tend to use and like. For example, grep across a project, export the results with embark-export, enable wgrep mode and then run a regexp-replace.
+ Using org-agenda and syncing it with Nextcloud could be an interesting workflow. It should be possible, but I am not sure how much benefit it would bring me at this point in time. In any case, it is worth exploring.
+ I need to learn how org links work. This is useful for transclusions. Which functionality do these org links come with? How do I link to a region?
+ Narrowing can be very useful in Emacs. What kind of functionality surrounds narrowing? I know about narrowing and widening.
+ Add yasnippet / abbrev mode. Which one would I prefer and why? There is also the notion of skeletons, I can use e.g. company for suggestions, auto-insert and dabbrev mode. What do all of these do?
+ Add LaTeX configuration to Emacs again so I can start adding notes with equations.
+ Spelling checkers could be nice to have in Emacs, but currently I am not actively using them. What variables can I set, which commands can I trigger and are there useful third-party packages?
+ The terminal version of Emacs has difficult to read colours for magit. I should fix that.
+ Set up org-babel for Python so I can start moving over my data-science scratch-pad.
+ Can I not set these below directories relatively? That would remove the pain of having to use the absolute monorepo directory.
+ We need to extract the monorepo directory as a parameter to parameters.nix. Then we can set the org directory in org/default.nix and carry it through with _modules.args to org-roam, where we use it to set the notes and templates directories as parameters, keeping everything modular.

** Hardware
+ Sometimes I end up running out of space on my root partition when building a package, since it is a tmpfs and is capped at 4-8G. This can happen when building machine learning libraries which are often quite large. I increased the tmpfs size to 8G which works most of the time, but is there a smarter way to handle this? Can I move the building process to a location not on my tmpfs?
+ Add my Raspberry Pi to my network.
+ Use Disko instead of scripted partitioning.
+ Start using LUKS Disk Encryption
+ Create my own ISO image. When I run `nix build .#nixosConfigurations.laptop.config.system.build.isoImage`, I run into a `does not provide attribute`-error. Why is that? Shouldn't this work?

** License
+ Add license if I continue developing, but I am not sure which one is legally allowed... If there is any Emacs code in there, it should be GPL?

** Virtual machine
+ Fix the compositor issue I have on virtual-devbox. For some reason if picom is turned on, the screen only updates when the compositor has to update, such as when I full-screen a window. Why?
+ How can I ssh into a NixOS VM while setting it up? Should not be so difficult since sshd is enabled by default.
+ Modularize the hardware from my VM features. Sometimes I want to the same features on a different hardware (aarch64-linux vs. x86_64-linux). I will need to be able to plug in the right hardware easily. Check how mitchellh does this.

** Website
+ I removed the notes from my website. Would I still want to mention how I use these notes? In general maybe what my workflow is with Emacs, but also with denote?
+ Blogs and articles should be different
  - Blogs are more opinion-based and "life lessons"
  - Articles contain more clear-cut information and can often span series
+ Would it make sense to have a cache of websites that people can request when needed?
