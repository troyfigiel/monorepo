* TODO.org

** Next up
+ Add LaTeX configuration to Emacs again so I can start adding notes with equations.
+ I have a nix flake check now, but it does not check if my packages build successfully. How can I incorporate that?
+ Hostnames should be completely specified by the directory containing the machine configuration.
+ Modularize my Terraform code.
+ Once the above point is done, let's add my raspberry pi to the network.
+ Final renaming of my repository? I am not just building with Nix, but also Terraform. Just name it my-builds?

** Copying Nix store

`nix copy --to 's3://nix-binary-cache?profile=minio&endpoint=192.168.178.37:10106&scheme=http' --all`

For Nix to be able to read from the binary cache, I will need to make sure the bucket is publicly readable.

What is the preferred way to clean up my binary cache? Is there a garbage control?

** Important notes
It is actually possible to define the same setting multiple times as long as the values are consistent. Booleans should be the same, lists will be concatenated, etc. However, what is not possible, is to define the same bind mounts multiple times. The options I set regarding persistence can only occur once across my entire configuration. For example, to enable Steam, I need to enable some hardware options, firewall options as well as bind mounts in my user homes. By creating user features (that are NixOS modules), I can keep my code DRY since I can set these persistence options and the necessary hardware options in the same module. If I have multiple users that need the same NixOS features, such as programs.steam.enable = true;, they will be merged together and NixOS will not throw an error.

Hosts should be defined per possible host name I can set. If I need two systems that are almost the same, I can define a module that contains all the overlapping options.

** Ideas
I have tried out Proton for Steam (which is simply a setting in the Steam client), but with bad results. For some reason it keeps freezing and messed up my entire Steam install. I had to reinstall to fix the issues. To play games, it might just be better to have a separate HDD with a Windows install.

Lutris might still be worth looking at. I only use Steam though, so can it still be useful somehow? It is a simple download with nix shell nixpkgs#lutris.

B00merang-Project's Windows themes to make it easier for any guests?

** TODO Emacs
+ It would be very interesting to check out delve if it comes to Melpa: https://github.com/publicimageltd/delve
+ Replace eglot by lsp-mode (preferred due to lsp-docker)
+ Set up dap-mode? I'm not sure exactly what the advantage of dap-mode over a normal debugger is to be honest.
+ The terminal version of Emacs has difficult to read colours for magit. I should fix that.
+ Sometimes I need to pull in multiple elisp files of the same repository with use-package. Is this how it is supposed to be done?
+ Set up org-babel for Python so I can start moving over my data-science scratchpad.
+ The message buffer has a different colour in solaire-mode. Can I fix this somehow?
+ It happens regularly that I have a window in a horizontal split and I would prefer a vertical split. Is there a simple evil function I can bind a key to?
+ It might be good to have multiple font sets I can use with fontaine. Sometimes this font is a bit big. What would be nice and why?
+ We need to extract the nix-builds directory as a parameter to parameters.nix. Then we can set the org directory in org/default.nix and carry it through with _modules.args to org-roam, where we use it to set the notes and templates directories as parameters, keeping everything modular. The problem currently is that we cannot set them as an environment variable when using emacsclient, since it seems emacsclient starts before the variables are set.
+ Clean up the org-roam-template code. It is still a left-over from when I was making band-aid into a separate package.
+ My mode-line seems to be too wide. I don't know why that happened in the first place.

** TODO General
+ I should keep the machine names short, i.e. to a single word: cloud-server -> cloud, virtual-devbox -> devbox.
+ Use disko instead of scripted partitioning.
+ Make the cloud-server storage impermanent using impermanence.
+ Fix the compositor issue I have on virtual-devbox. For some reason if picom is turned on, the screen only updates when the compositor has to update, such as when I full-screen a window. Why?
+ How can I ssh into a NixOS VM while setting it up? Should not be so difficult since sshd is enabled by default.
+ Modularize the hardware from my VM features. Sometimes I want to the same features on a different hardware (aarch64-linux vs. x86_64-linux). I will need to be able to plug in the right hardware easily. Check how mitchellh does this.
+ For my use case, maybe Syncthing is not the best solution. I sometimes end up with sync-conflicts where I do not think there should be. This has me worried that Syncthing might accidentally delete files I do not want to have deleted. Maybe Unison is a better tool for me?
+ Unfortunately, I have not found that poetry2nix is 100% effective. It often happens that I am missing some module or library and I don't know how to add it. My current workflow is to use a Dockerfile, which also works but is not as reproducible.
+ I would like to move over my data-science scratchpad and use poetry2nix for it. Maybe give it a try with a single example like the red-wine data?

** TODO Bootstrapping
+ Start using LUKS Disk Encryption
+ Create my own ISO image. When I run `nix build .#nixosConfigurations.laptop.config.system.build.isoImage`, I run into a `does not provide attribute`-error. Why is that? Shouldn't this work?

** TODO Desktop
*** General
+ Use headphones to start and pause videos / music
+ Receive a notification when the battery is low (at 20% and at 10%). That should be easy with Dunst.
+ Set up a nice notification theme for increasing / decreasing brightness and volume
+ Set up rofi-pass
+ Set up a consistent Nix color scheme using nix-colors
+ Save a predefined set of i3 window layouts
+ The Nitrokey app icon should appear in the bottom bar upon startup
+ Change my cursor theme
+ betterscreenlock automatically locks after 10 mins, even when a video is playing

*** Polybar and Dunst
+ Add icons to Polybar
+ Volume
+ Brightness
+ Music player
+ Bluetooth
+ Networks
+ VPN
+ Active window (i3)
+ Temperature
+ Hard disk drive remaining and tmpfs size remaining

** TODO Subprojects
*** modules
+ Rename virtualisation to development
+ Desktop contains everything I would normally put in home-manager and more

*** website
+ Blogs and articles should be different
  - Blogs are more opinion-based and "life lessons"
  - Articles contain more clear-cut information and can often span series
+ Would it make sense to have a cache of websites that people can request when needed?

*** License
+ Add license if I continue developing, but I am not sure which one is legally allowed... If there is any Emacs code in there, it should be GPL?
