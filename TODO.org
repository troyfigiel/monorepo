* Some notes

** Copying Nix store

`nix copy --to 's3://nix-binary-cache?profile=minio&endpoint=192.168.178.37:10106&scheme=http' --all`

For Nix to be able to read from the binary cache, I will need to make sure the bucket is publicly readable.

What is the preferred way to clean up my binary cache? Is there a garbage control?

* TODOs

** important note
It is actually possible to define the same setting multiple times as long as the values are consistent. Booleans should be the same, lists will be concatenated, etc.
However, what is not possible, is to define the same bind mounts multiple times. The options I set regarding persistence can only occur once across my entire configuration.
For example, to enable Steam, I need to enable some hardware options, firewall options as well as bind mounts in my user homes.
By creating user features (that are NixOS modules), I can keep my code DRY since I can set these persistence options and the necessary hardware options in the same module.
If I have multiple users that need the same NixOS features, such as programs.steam.enable = true;, they will be merged together and NixOS will not throw an error.

** Emacs TODOs
1. It would be very interesting to check out delve if it comes to Melpa: https://github.com/publicimageltd/delve
2. Replace eglot by lsp-mode (preferred due to lsp-docker)
3. Set up dap-mode? I'm not sure exactly what the advantage of dap-mode over a normal debugger is to be honest.
4. The terminal version of Emacs has difficult to read colours for magit. I should fix that.

** More notes:
1. This means I do not need to deploy homes separately and I do not need to use deploy-rs necessarily. Maybe I could use terraform-nixos or something like morph?
2. I should keep the machine names short, i.e. to a single word: cloud-server -> cloud, virtual-devbox -> devbox.
3. Use disko instead of automatic partitioning through my Makefile?
4. Make the cloud-server storage impermanent using impermanence.
5. Can I use agenix with Terranix? The advantage of agenix is that it uses my existing ssh infrastructure, meaning I do not need a gpg key for each ssh key plus I can commit the ssh keys and then manually add them to my machines after decrypting them through sops.
6. Should I be using output in Terraform instead of local_file? Does it really make a difference for me?
7. Fix the compositor issue I have on virtual-devbox. For some reason if picom is turned on, the screen only updates when the compositor has to update, such as when I full-screen a window. Why?
8. Can I replace the Makefile by some nix run commands? What would make the most sense? The nice thing about nix run commands, is that they can encapsulate certain packages that need to be downloaded. For example, if I need a find command in my Makefile, it needs to already be installed.
9. How can I ssh into a NixOS VM while setting it up? Should not be so difficult since sshd is enabled by default.
10. Modularize the hardware from my VM features. Sometimes I want to the same features on a different hardware (aarch64-linux vs. x86_64-linux). I will need to be able to plug in the right hardware easily. Check how mitchellh does this.
11. For my use case, maybe Syncthing is not the best solution. I sometimes end up with sync-conflicts where I do not think there should be. This has me worried that Syncthing might accidentally delete files I do not want to have deleted. Maybe Unison is a better tool for me?
12. Unfortunately, I have not found that poetry2nix is 100% effective. It often happens that I am missing some module or library and I don't know how to add it. My current workflow is to use a Dockerfile, which also works but is not as reproducible.
13. I would like to move over my data-science scratchpad and use poetry2nix for it. Maybe give it a try with a single example like the red-wine data?
14. emacs-init should create config as a list. This way the module system can merge the lists together and I can modularize my config better.

I have tried out Proton for Steam (which is simply a setting in the Steam client), but with bad results.
For some reason it keeps freezing and messed up my entire Steam install. I had to reinstall to fix the issues.
To play games, it might just be better to have a separate HDD with a Windows install.

Lutris might still be worth looking at. I only use Steam though, so can it still be useful somehow? It is a simple download with nix shell nixpkgs#lutris.

Learning more about Nix:
- Start using LUKS Disk Encryption
- Create my own iso

Setting up the right configuration:
- Use headphones to start and pause videos / music
- Receive a notification when the battery is low (at 20% and at 10%). That should be easy with Dunst.
- Set up a nice notification theme for increasing / decreasing brightness and volume
- Set up browserpass. Or can I use rofi-pass for that?
- Set up a consistent Nix color scheme using nix-colors
- Add icons to Polybar
- Save a predefined set of i3 window layouts
- The Nitrokey app icon should appear in the bottom bar upon startup
- Change my cursor theme
- betterscreenlock automatically locks after 10 mins, even when a video is playing
- Can I use the impermanence module together with Syncthing somehow?

To be added to polybar / dunst:
- Volume
- Brightness
- Music player
- Bluetooth
- Networks
- VPN
- Active window (i3)
- Temperature
- Hard disk drive remaining and tmpfs size remaining

B00merang-Project's Windows themes to make it easier for any guests?

** modules
- Rename virtualisation to development
- Desktop contains everything I would normally put in home-manager and more

** website
- Blogs and articles should be different
  - Blogs are more opinion-based and "life lessons"
  - Articles contain more clear-cut information and can often span series
- Would it make sense to have a cache of websites that people can request when needed?

** License
- Add license if I continue developing, but I am not sure which one is legally allowed... If there is any Emacs code in there, it should be GPL?

** features
- Some cross-cutting concerns exist that cannot be fixed through the module structure. For example, whether we are persisting data or not
- Similarly, sops and all the security settings are cross-cutting
- Sometimes the choice of desktop (like gnome) also defines certain functionality. For example, Gnome automatically sets its own keyring.
- This is reminiscent of aspect-oriented programming. We might want to call the options such as whether a machine is using persistence aspects instead of features.
- The type of hardware I have (bluetooth, sound, wifi, etc.) could also be cross-cutting
