#+title:      Main inbox
#+date:       [2022-03-26 Sat 10:37]
#+filetags:
#+identifier: 20220326T103700

- Uses hashes on webpages of a blog referring to a commit hash of the repository that contains your
  website. That allows me to modify a webpage and a user to find back the previous version of the
  webpage if they need to. Maybe even allow users to scroll to previous versions of the webpage
  based on the commit hash?
- I use *transient inboxes* for my projects.
- Git commit messages become more useful the more the "outline of a project has been worked out".
  In the early stages it is hard to write good commit messages.
- Proofs can be messy. Sometimes the proofs give insights, but sometimes they are only a tool to
  get to a result. Depending on the case, we might need different types of notes.
- Normally a software engineer would wear one of two hats: building or refactoring. This does
  not mean that they remain in one state for a very long time, but the point is that they are
  different states of mind. Similarly when it comes to notes, we have a "building stage" where we
  extract information and we have a "maintaining stage" where we place the notes in the right
  context. Similar to ETL?
- If you need to explain results, a quick statement with a strong result draws people's attention.
  You can always "diet it down" a bit afterwards, but you need to get the point across.
- Separating level of abstraction is important for many different tasks. For example,
  communication, data exploration, software design. It all relates back to category theory?
- Often data science projects spring forth from a question that is deemed interesting. It is then
  important to dive down while keeping track of the original reason why the project was important.
  Don't lose sight of what is important, because there is always more work to be done. Identify
  quickly the areas of most interest and dive deeper.
- Exploration should be a bit more "bread-first" search. Think about a couple of things that can
  have impact and don't limit yourself based on what you think should be the direction to take. But
  do keep in mind that what you're exploring has an impact.
- We create a raw data set, because in some cases extracting the data itself can be quite an
  ordeal. And on top of that, data can be in all kinds of formats. Keep things modular,
  incrementally solve the problem.
- Incrementally solving problems is philosophically similar to perturbation theory. Some problems
  cannot be solved incrementally though, non-peturbative.
- Don't lie with statistics, but also do not lose track of the bigger picture. There is a balance
  to be made between completeness and painting a clear picture. Don't lose yourself in the details
  and don't oversimplify. Similar to the whole idea of overtraining and undertraining: You want the
  overall pattern to be clear.
- Don't lie with statistics: Unethical and on top of that you will lose credibility. Credibility
  and integrity are incredibly important for a data scientist.
- How do people lie with statistics? p-hacking, what else?
- [[denote:20220224T112337][Notebooks and spreadsheets are appropriate in different situations]]: Spreadsheet can show a lot of
  high level data (averages are often appropriate to check for differences), but fail to be able
  to go in depth.
- Tags are helpful for blogposts, so viewers can quickly find back something they looked for in the
  past. They are not that great for notes in my opinion.
- The value of maintaining notes should come from the end goal: Notes are a tool for both learning
  and writing. There is no value in maintaining notes just for the collector's fallacy.
- Placing notes in the Zettelkasten requires a different set of tools (indices) than creative
  thinking (association between notes).
- Tags can actually be useful in a Zettelkasten if concepts from different fields carry the same
  name by coincidence. You need a clear separation of concepts.
- Data analysis and statistical mechanics have a lot of overlap, but as analysts we have access to
  the [[denote:20220405T214050][Microstates]] of a system and we can check how well our assumptions work against the data,
  whereas a physicist only has access to the [[denote:20220405T214025][Macrostates]] and has to deduce what happened on the
  microscopic scale
- [[denote:20220407T165848][Garbage in, garbage out]]
- For software engineering, it is good to think about your requirements up front. Write them down,
  think about an architecture beforehand and then when you have a good idea of what will work, work
  towards that goal and tie up all the loose ends along the way (like with [[denote:20220317T223641][TDD]] or [[denote:20220427T091817][BDD]]).
